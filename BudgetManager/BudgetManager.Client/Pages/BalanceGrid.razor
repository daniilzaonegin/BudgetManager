@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveAuto
@inject IApiClient ApiClient
@inject NavigationManager NavManager

<FluentDatePicker Label="Balance Dates" @bind-Value="@DateFrom" />
<FluentDatePicker AriaLabel="To" @bind-Value="@DateTo" />

@if (_balanceItemsProvider == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid @ref="_grid" ItemsProvider="_balanceItemsProvider">
        <PropertyColumn Property="@(p => p.Amount)" Sortable="true" />
        <PropertyColumn Property="@(p => p.EntryDate)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.IsExpense)" Sortable="true" />
    </FluentDataGrid>
}
@code {
    private FluentDataGrid<BalanceEntryDto> _grid;
    private DateTime? _dateFrom;
    private DateTime? _dateTo;
    private DateTime? DateFrom
    {
        get
        {
            return _dateFrom;
        }
        set
        {
            _dateFrom = value;
            ReloadGrid();
        }
    }

    private DateTime? DateTo
    {
        get
        {
            return _dateTo;
        }
        set
        {
            _dateTo = value;
            ReloadGrid();
        }
    }

    private GridItemsProvider<BalanceEntryDto> _balanceItemsProvider;


    protected override void OnInitialized()
    {
        _dateFrom = DateTime.Now.AddMonths(-1).Date;
        _dateTo = DateTime.Now.Date;
        // Define the GridRowsDataProvider. Its job is to convert QuickGrid's GridRowsDataProviderRequest into a query against
        // an arbitrary data soure. In this example, we need to translate query parameters into the particular URL format
        // supported by the external JSON API. It's only possible to perform whatever sorting/filtering/etc is supported
        // by the external API.
        _balanceItemsProvider = async req =>
        {
            var response = await ApiClient.GetBalanceEntries(DateFrom, DateTo);
            return GridItemsProviderResult.From(
                items: response.Items,
                totalItemCount: response.TotalRowCount);
        };
    }
    private void ReloadGrid()
    {
        _grid.RefreshDataAsync();
    }
}