@* To get access to all Fluent UI System icons, install the Microsoft.FluentUI.AspNetCore.Compoents.Icon package *@
@* See all the diffeent ways on how to use icons at https://www.fluentui-blazor.net/Icon *@
@rendermode InteractiveAuto

@implements IDisposable

@inject NavigationManager NavigationManager

<nav>
    <FluentNavMenu Width="250" Collapsible="true" @bind-Expanded="@_expanded" Title="Custom navigation menu">
        <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icon.FromImageUrl("/images/home.svg")" IconColor="Color.Accent">Home</FluentNavLink>
        <AuthorizeView>
            <Authorized>
                <FluentNavLink Href="/chart" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.ChartMultiple())" IconColor="Color.Accent">Charts</FluentNavLink>
                <FluentNavLink>@context.User.Identity?.Name</FluentNavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <FluentButton Type="ButtonType.Submit"
                                  Style="width: 100%;" IconStart="@(new Icons.Regular.Size16.ArrowEnter().WithColor(Color.Neutral))"
                                  Title="Logout" />
                </form>
            </Authorized>
            <NotAuthorized>
                <FluentNavLink Href="Account/Login" IconColor="@Color.Neutral" Icon="@((new Icons.Regular.Size16.ArrowExport()).WithColor(Color.Neutral))">Login</FluentNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </FluentNavMenu>

</nav>

@code {
    private string? currentUrl;
    private bool _expanded = false;
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

